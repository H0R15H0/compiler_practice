
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN BEGIN COMMA DIV DO ELSE END EQ FOR FUNCTION GE GT IDENT IF INTERVAL LBRACKET LE LPAREN LT MINUS MULT NEQ NUMBER PERIOD PLUS PROCEDURE PROGRAM RBRACKET READ RPAREN SEMICOLON THEN TO VAR WHILE WRITE\n    program : PROGRAM IDENT SEMICOLON outblock PERIOD\n    \n    outblock : var_decl_part subprog_decl_part statement\n    \n    var_decl_part : var_decl_list SEMICOLON\n                  |\n    \n    var_decl_list : var_decl_list SEMICOLON var_decl\n        | var_decl\n    \n    var_decl : VAR id_list\n    \n    subprog_decl_part : subprog_decl_list SEMICOLON\n        | \n    \n    subprog_decl_list : subprog_decl_list SEMICOLON subprog_decl\n        | subprog_decl\n    \n    subprog_decl : proc_decl\n    \n    proc_decl : PROCEDURE proc_name SEMICOLON inblock\n    \n    proc_name : IDENT\n    \n    inblock : var_decl_part statement\n    \n    statement_list : statement_list SEMICOLON statement\n        | statement\n    \n    statement : assignment_statement\n        | if_statement\n        | while_statement\n        | for_statement\n        | proc_call_statement\n        | null_statement\n        | block_statement\n        | read_statement\n        | write_statement\n    \n    assignment_statement : IDENT ASSIGN expression\n    \n    if_statement : IF condition THEN statement else_statement\n    \n    else_statement : ELSE statement\n        | \n    \n    while_statement : WHILE condition DO statement\n    \n    for_statement : FOR IDENT ASSIGN expression TO expression DO statement\n    \n    proc_call_statement : proc_call_name\n    \n    proc_call_name : IDENT\n    \n    block_statement : BEGIN statement_list END\n    \n    read_statement : READ LPAREN IDENT RPAREN\n    \n    write_statement : WRITE LPAREN expression RPAREN\n    \n    null_statement : \n    \n    condition : expression EQ expression\n        | expression NEQ expression\n        | expression LT expression\n        | expression LE expression\n        | expression GT expression\n        | expression GE expression\n    \n    expression : term\n        | MINUS term\n        | expression PLUS term\n        | expression MINUS term\n    \n    term : f_actor\n        | term MULT f_actor\n        | term DIV f_actor\n    \n    f_actor : var_name\n        | number\n        | LPAREN expression RPAREN\n    \n    var_name : IDENT\n    \n    number : NUMBER\n    \n    id_list : IDENT\n        | id_list COMMA IDENT\n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,10,],[0,-1,]),'IDENT':([2,4,6,9,11,15,16,30,31,32,34,37,41,42,46,50,57,58,60,63,64,65,66,67,68,69,70,71,72,73,76,77,79,83,103,104,107,],[3,-4,-9,18,29,39,-3,51,51,54,29,-8,61,51,51,51,80,51,-4,29,51,51,51,51,51,51,51,51,51,51,29,51,29,29,29,51,29,]),'SEMICOLON':([3,7,8,12,13,14,16,17,18,20,21,22,23,24,25,26,27,28,29,33,34,38,39,40,45,47,48,49,51,52,55,56,59,60,61,62,63,74,76,78,79,82,83,84,91,92,93,94,95,96,98,99,100,101,102,103,105,107,108,],[4,16,-6,37,-11,-12,-3,-7,-57,-18,-19,-20,-21,-22,-23,-24,-25,-26,-34,-33,-38,60,-14,-5,-45,-49,-52,-53,-55,-56,79,-17,-10,-4,-58,-27,-38,-46,-38,-35,-38,-13,-38,-30,-47,-48,-50,-51,-54,-31,-16,-36,-37,-15,-28,-38,-29,-38,-32,]),'PROCEDURE':([4,6,16,37,],[-4,15,-3,15,]),'IF':([4,6,11,16,34,37,60,63,76,79,83,103,107,],[-4,-9,30,-3,30,-8,-4,30,30,30,30,30,30,]),'WHILE':([4,6,11,16,34,37,60,63,76,79,83,103,107,],[-4,-9,31,-3,31,-8,-4,31,31,31,31,31,31,]),'FOR':([4,6,11,16,34,37,60,63,76,79,83,103,107,],[-4,-9,32,-3,32,-8,-4,32,32,32,32,32,32,]),'BEGIN':([4,6,11,16,34,37,60,63,76,79,83,103,107,],[-4,-9,34,-3,34,-8,-4,34,34,34,34,34,34,]),'READ':([4,6,11,16,34,37,60,63,76,79,83,103,107,],[-4,-9,35,-3,35,-8,-4,35,35,35,35,35,35,]),'WRITE':([4,6,11,16,34,37,60,63,76,79,83,103,107,],[-4,-9,36,-3,36,-8,-4,36,36,36,36,36,36,]),'PERIOD':([4,5,6,11,16,19,20,21,22,23,24,25,26,27,28,29,33,37,45,47,48,49,51,52,62,63,74,76,78,84,91,92,93,94,95,96,99,100,102,103,105,107,108,],[-4,10,-9,-38,-3,-2,-18,-19,-20,-21,-22,-23,-24,-25,-26,-34,-33,-8,-45,-49,-52,-53,-55,-56,-27,-38,-46,-38,-35,-30,-47,-48,-50,-51,-54,-31,-36,-37,-28,-38,-29,-38,-32,]),'VAR':([4,16,60,],[9,9,9,]),'COMMA':([17,18,61,],[41,-57,-58,]),'END':([20,21,22,23,24,25,26,27,28,29,33,34,45,47,48,49,51,52,55,56,62,63,74,76,78,79,84,91,92,93,94,95,96,98,99,100,102,103,105,107,108,],[-18,-19,-20,-21,-22,-23,-24,-25,-26,-34,-33,-38,-45,-49,-52,-53,-55,-56,78,-17,-27,-38,-46,-38,-35,-38,-30,-47,-48,-50,-51,-54,-31,-16,-36,-37,-28,-38,-29,-38,-32,]),'ELSE':([20,21,22,23,24,25,26,27,28,29,33,45,47,48,49,51,52,62,63,74,76,78,84,91,92,93,94,95,96,99,100,102,103,105,107,108,],[-18,-19,-20,-21,-22,-23,-24,-25,-26,-34,-33,-45,-49,-52,-53,-55,-56,-27,-38,-46,-38,-35,103,-47,-48,-50,-51,-54,-31,-36,-37,-28,-38,-29,-38,-32,]),'ASSIGN':([29,54,],[42,77,]),'MINUS':([30,31,42,44,45,47,48,49,50,51,52,58,62,64,65,66,67,68,69,74,75,77,81,85,86,87,88,89,90,91,92,93,94,95,97,104,106,],[46,46,46,71,-45,-49,-52,-53,46,-55,-56,46,71,46,46,46,46,46,46,-46,71,46,71,71,71,71,71,71,71,-47,-48,-50,-51,-54,71,46,71,]),'LPAREN':([30,31,35,36,42,46,50,58,64,65,66,67,68,69,70,71,72,73,77,104,],[50,50,57,58,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'NUMBER':([30,31,42,46,50,58,64,65,66,67,68,69,70,71,72,73,77,104,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'THEN':([43,45,47,48,49,51,52,74,85,86,87,88,89,90,91,92,93,94,95,],[63,-45,-49,-52,-53,-55,-56,-46,-39,-40,-41,-42,-43,-44,-47,-48,-50,-51,-54,]),'EQ':([44,45,47,48,49,51,52,74,91,92,93,94,95,],[64,-45,-49,-52,-53,-55,-56,-46,-47,-48,-50,-51,-54,]),'NEQ':([44,45,47,48,49,51,52,74,91,92,93,94,95,],[65,-45,-49,-52,-53,-55,-56,-46,-47,-48,-50,-51,-54,]),'LT':([44,45,47,48,49,51,52,74,91,92,93,94,95,],[66,-45,-49,-52,-53,-55,-56,-46,-47,-48,-50,-51,-54,]),'LE':([44,45,47,48,49,51,52,74,91,92,93,94,95,],[67,-45,-49,-52,-53,-55,-56,-46,-47,-48,-50,-51,-54,]),'GT':([44,45,47,48,49,51,52,74,91,92,93,94,95,],[68,-45,-49,-52,-53,-55,-56,-46,-47,-48,-50,-51,-54,]),'GE':([44,45,47,48,49,51,52,74,91,92,93,94,95,],[69,-45,-49,-52,-53,-55,-56,-46,-47,-48,-50,-51,-54,]),'PLUS':([44,45,47,48,49,51,52,62,74,75,81,85,86,87,88,89,90,91,92,93,94,95,97,106,],[70,-45,-49,-52,-53,-55,-56,70,-46,70,70,70,70,70,70,70,70,-47,-48,-50,-51,-54,70,70,]),'RPAREN':([45,47,48,49,51,52,74,75,80,81,91,92,93,94,95,],[-45,-49,-52,-53,-55,-56,-46,95,99,100,-47,-48,-50,-51,-54,]),'DO':([45,47,48,49,51,52,53,74,85,86,87,88,89,90,91,92,93,94,95,106,],[-45,-49,-52,-53,-55,-56,76,-46,-39,-40,-41,-42,-43,-44,-47,-48,-50,-51,-54,107,]),'TO':([45,47,48,49,51,52,74,91,92,93,94,95,97,],[-45,-49,-52,-53,-55,-56,-46,-47,-48,-50,-51,-54,104,]),'MULT':([45,47,48,49,51,52,74,91,92,93,94,95,],[72,-49,-52,-53,-55,-56,72,72,72,-50,-51,-54,]),'DIV':([45,47,48,49,51,52,74,91,92,93,94,95,],[73,-49,-52,-53,-55,-56,73,73,73,-50,-51,-54,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'outblock':([4,],[5,]),'var_decl_part':([4,60,],[6,83,]),'var_decl_list':([4,60,],[7,7,]),'var_decl':([4,16,60,],[8,40,8,]),'subprog_decl_part':([6,],[11,]),'subprog_decl_list':([6,],[12,]),'subprog_decl':([6,37,],[13,59,]),'proc_decl':([6,37,],[14,14,]),'id_list':([9,],[17,]),'statement':([11,34,63,76,79,83,103,107,],[19,56,84,96,98,101,105,108,]),'assignment_statement':([11,34,63,76,79,83,103,107,],[20,20,20,20,20,20,20,20,]),'if_statement':([11,34,63,76,79,83,103,107,],[21,21,21,21,21,21,21,21,]),'while_statement':([11,34,63,76,79,83,103,107,],[22,22,22,22,22,22,22,22,]),'for_statement':([11,34,63,76,79,83,103,107,],[23,23,23,23,23,23,23,23,]),'proc_call_statement':([11,34,63,76,79,83,103,107,],[24,24,24,24,24,24,24,24,]),'null_statement':([11,34,63,76,79,83,103,107,],[25,25,25,25,25,25,25,25,]),'block_statement':([11,34,63,76,79,83,103,107,],[26,26,26,26,26,26,26,26,]),'read_statement':([11,34,63,76,79,83,103,107,],[27,27,27,27,27,27,27,27,]),'write_statement':([11,34,63,76,79,83,103,107,],[28,28,28,28,28,28,28,28,]),'proc_call_name':([11,34,63,76,79,83,103,107,],[33,33,33,33,33,33,33,33,]),'proc_name':([15,],[38,]),'condition':([30,31,],[43,53,]),'expression':([30,31,42,50,58,64,65,66,67,68,69,77,104,],[44,44,62,75,81,85,86,87,88,89,90,97,106,]),'term':([30,31,42,46,50,58,64,65,66,67,68,69,70,71,77,104,],[45,45,45,74,45,45,45,45,45,45,45,45,91,92,45,45,]),'f_actor':([30,31,42,46,50,58,64,65,66,67,68,69,70,71,72,73,77,104,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,93,94,47,47,]),'var_name':([30,31,42,46,50,58,64,65,66,67,68,69,70,71,72,73,77,104,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'number':([30,31,42,46,50,58,64,65,66,67,68,69,70,71,72,73,77,104,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'statement_list':([34,],[55,]),'inblock':([60,],[82,]),'else_statement':([84,],[102,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM IDENT SEMICOLON outblock PERIOD','program',5,'p_program','compiler.py',97),
  ('outblock -> var_decl_part subprog_decl_part statement','outblock',3,'p_outblock','compiler.py',102),
  ('var_decl_part -> var_decl_list SEMICOLON','var_decl_part',2,'p_var_decl_part','compiler.py',107),
  ('var_decl_part -> <empty>','var_decl_part',0,'p_var_decl_part','compiler.py',108),
  ('var_decl_list -> var_decl_list SEMICOLON var_decl','var_decl_list',3,'p_var_decl_list','compiler.py',113),
  ('var_decl_list -> var_decl','var_decl_list',1,'p_var_decl_list','compiler.py',114),
  ('var_decl -> VAR id_list','var_decl',2,'p_var_decl','compiler.py',119),
  ('subprog_decl_part -> subprog_decl_list SEMICOLON','subprog_decl_part',2,'p_subprog_decl_part','compiler.py',124),
  ('subprog_decl_part -> <empty>','subprog_decl_part',0,'p_subprog_decl_part','compiler.py',125),
  ('subprog_decl_list -> subprog_decl_list SEMICOLON subprog_decl','subprog_decl_list',3,'p_subprog_decl_list','compiler.py',130),
  ('subprog_decl_list -> subprog_decl','subprog_decl_list',1,'p_subprog_decl_list','compiler.py',131),
  ('subprog_decl -> proc_decl','subprog_decl',1,'p_subprog_decl','compiler.py',136),
  ('proc_decl -> PROCEDURE proc_name SEMICOLON inblock','proc_decl',4,'p_proc_decl','compiler.py',141),
  ('proc_name -> IDENT','proc_name',1,'p_proc_name','compiler.py',146),
  ('inblock -> var_decl_part statement','inblock',2,'p_inblock','compiler.py',151),
  ('statement_list -> statement_list SEMICOLON statement','statement_list',3,'p_statement_list','compiler.py',156),
  ('statement_list -> statement','statement_list',1,'p_statement_list','compiler.py',157),
  ('statement -> assignment_statement','statement',1,'p_statement','compiler.py',162),
  ('statement -> if_statement','statement',1,'p_statement','compiler.py',163),
  ('statement -> while_statement','statement',1,'p_statement','compiler.py',164),
  ('statement -> for_statement','statement',1,'p_statement','compiler.py',165),
  ('statement -> proc_call_statement','statement',1,'p_statement','compiler.py',166),
  ('statement -> null_statement','statement',1,'p_statement','compiler.py',167),
  ('statement -> block_statement','statement',1,'p_statement','compiler.py',168),
  ('statement -> read_statement','statement',1,'p_statement','compiler.py',169),
  ('statement -> write_statement','statement',1,'p_statement','compiler.py',170),
  ('assignment_statement -> IDENT ASSIGN expression','assignment_statement',3,'p_assignment_statement','compiler.py',175),
  ('if_statement -> IF condition THEN statement else_statement','if_statement',5,'p_if_statement','compiler.py',180),
  ('else_statement -> ELSE statement','else_statement',2,'p_else_statement','compiler.py',185),
  ('else_statement -> <empty>','else_statement',0,'p_else_statement','compiler.py',186),
  ('while_statement -> WHILE condition DO statement','while_statement',4,'p_while_statement','compiler.py',191),
  ('for_statement -> FOR IDENT ASSIGN expression TO expression DO statement','for_statement',8,'p_for_statement','compiler.py',196),
  ('proc_call_statement -> proc_call_name','proc_call_statement',1,'p_proc_call_statement','compiler.py',201),
  ('proc_call_name -> IDENT','proc_call_name',1,'p_proc_call_name','compiler.py',206),
  ('block_statement -> BEGIN statement_list END','block_statement',3,'p_block_statement','compiler.py',211),
  ('read_statement -> READ LPAREN IDENT RPAREN','read_statement',4,'p_read_statement','compiler.py',216),
  ('write_statement -> WRITE LPAREN expression RPAREN','write_statement',4,'p_write_statement','compiler.py',221),
  ('null_statement -> <empty>','null_statement',0,'p_null_statement','compiler.py',226),
  ('condition -> expression EQ expression','condition',3,'p_condition','compiler.py',231),
  ('condition -> expression NEQ expression','condition',3,'p_condition','compiler.py',232),
  ('condition -> expression LT expression','condition',3,'p_condition','compiler.py',233),
  ('condition -> expression LE expression','condition',3,'p_condition','compiler.py',234),
  ('condition -> expression GT expression','condition',3,'p_condition','compiler.py',235),
  ('condition -> expression GE expression','condition',3,'p_condition','compiler.py',236),
  ('expression -> term','expression',1,'p_expression','compiler.py',241),
  ('expression -> MINUS term','expression',2,'p_expression','compiler.py',242),
  ('expression -> expression PLUS term','expression',3,'p_expression','compiler.py',243),
  ('expression -> expression MINUS term','expression',3,'p_expression','compiler.py',244),
  ('term -> f_actor','term',1,'p_term','compiler.py',249),
  ('term -> term MULT f_actor','term',3,'p_term','compiler.py',250),
  ('term -> term DIV f_actor','term',3,'p_term','compiler.py',251),
  ('f_actor -> var_name','f_actor',1,'p_f_actor','compiler.py',256),
  ('f_actor -> number','f_actor',1,'p_f_actor','compiler.py',257),
  ('f_actor -> LPAREN expression RPAREN','f_actor',3,'p_f_actor','compiler.py',258),
  ('var_name -> IDENT','var_name',1,'p_var_name','compiler.py',263),
  ('number -> NUMBER','number',1,'p_number','compiler.py',268),
  ('id_list -> IDENT','id_list',1,'p_id_list','compiler.py',273),
  ('id_list -> id_list COMMA IDENT','id_list',3,'p_id_list','compiler.py',274),
]
